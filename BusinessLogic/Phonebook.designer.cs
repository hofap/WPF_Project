#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessLogic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Phonebook")]
	public partial class PhonebookDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttbGroup(tbGroup instance);
    partial void UpdatetbGroup(tbGroup instance);
    partial void DeletetbGroup(tbGroup instance);
    partial void InserttbPerson(tbPerson instance);
    partial void UpdatetbPerson(tbPerson instance);
    partial void DeletetbPerson(tbPerson instance);
    partial void InserttbPhone(tbPhone instance);
    partial void UpdatetbPhone(tbPhone instance);
    partial void DeletetbPhone(tbPhone instance);
    partial void InserttbPhoneType(tbPhoneType instance);
    partial void UpdatetbPhoneType(tbPhoneType instance);
    partial void DeletetbPhoneType(tbPhoneType instance);
    #endregion
		
		public PhonebookDataContext() : 
				base(global::BusinessLogic.Properties.Settings.Default.PhonebookConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PhonebookDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PhonebookDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PhonebookDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PhonebookDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbGroup> tbGroups
		{
			get
			{
				return this.GetTable<tbGroup>();
			}
		}
		
		public System.Data.Linq.Table<tbPerson> tbPersons
		{
			get
			{
				return this.GetTable<tbPerson>();
			}
		}
		
		public System.Data.Linq.Table<tbPhone> tbPhones
		{
			get
			{
				return this.GetTable<tbPhone>();
			}
		}
		
		public System.Data.Linq.Table<tbPhoneType> tbPhoneTypes
		{
			get
			{
				return this.GetTable<tbPhoneType>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spDeletePerson")]
		public int spDeletePerson([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> personID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spGroupsDisplay")]
		public ISingleResult<spGroupsDisplayResult> spGroupsDisplay()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spGroupsDisplayResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spPhoneTypesDisplay")]
		public ISingleResult<spPhoneTypesDisplayResult> spPhoneTypesDisplay()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spPhoneTypesDisplayResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spInsertUpdateContact")]
		public int spInsertUpdateContact([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> groupID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> personID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firstName, lastName, groupID, personID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spLinkPhone")]
		public int spLinkPhone([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonID", DbType="Int")] System.Nullable<int> personID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(15)")] string phoneNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> phoneTypeID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PhoneID", DbType="Int")] System.Nullable<int> phoneID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personID, phoneNumber, phoneTypeID, phoneID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spDeletePhone")]
		public int spDeletePhone([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> phoneID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), phoneID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spContactsDisplay")]
		public ISingleResult<spContactsDisplayResult> spContactsDisplay()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spContactsDisplayResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbGroups")]
	public partial class tbGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _GroupName;
		
		private EntitySet<tbPerson> _tbPersons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public tbGroup()
		{
			this._tbPersons = new EntitySet<tbPerson>(new Action<tbPerson>(this.attach_tbPersons), new Action<tbPerson>(this.detach_tbPersons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbGroup_tbPerson", Storage="_tbPersons", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<tbPerson> tbPersons
		{
			get
			{
				return this._tbPersons;
			}
			set
			{
				this._tbPersons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbPersons(tbPerson entity)
		{
			this.SendPropertyChanging();
			entity.tbGroup = this;
		}
		
		private void detach_tbPersons(tbPerson entity)
		{
			this.SendPropertyChanging();
			entity.tbGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbPersons")]
	public partial class tbPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _GroupID;
		
		private EntitySet<tbPhone> _tbPhones;
		
		private EntityRef<tbGroup> _tbGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    #endregion
		
		public tbPerson()
		{
			this._tbPhones = new EntitySet<tbPhone>(new Action<tbPhone>(this.attach_tbPhones), new Action<tbPhone>(this.detach_tbPhones));
			this._tbGroup = default(EntityRef<tbGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._tbGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbPerson_tbPhone", Storage="_tbPhones", ThisKey="PersonID", OtherKey="PersonID")]
		public EntitySet<tbPhone> tbPhones
		{
			get
			{
				return this._tbPhones;
			}
			set
			{
				this._tbPhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbGroup_tbPerson", Storage="_tbGroup", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public tbGroup tbGroup
		{
			get
			{
				return this._tbGroup.Entity;
			}
			set
			{
				tbGroup previousValue = this._tbGroup.Entity;
				if (((previousValue != value) 
							|| (this._tbGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbGroup.Entity = null;
						previousValue.tbPersons.Remove(this);
					}
					this._tbGroup.Entity = value;
					if ((value != null))
					{
						value.tbPersons.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("tbGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbPhones(tbPhone entity)
		{
			this.SendPropertyChanging();
			entity.tbPerson = this;
		}
		
		private void detach_tbPhones(tbPhone entity)
		{
			this.SendPropertyChanging();
			entity.tbPerson = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbPhones")]
	public partial class tbPhone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhoneID;
		
		private string _PhoneNumber;
		
		private int _PhoneTypeID;
		
		private int _PersonID;
		
		private EntityRef<tbPerson> _tbPerson;
		
		private EntityRef<tbPhoneType> _tbPhoneType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneIDChanging(int value);
    partial void OnPhoneIDChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneTypeIDChanging(int value);
    partial void OnPhoneTypeIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public tbPhone()
		{
			this._tbPerson = default(EntityRef<tbPerson>);
			this._tbPhoneType = default(EntityRef<tbPhoneType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhoneID
		{
			get
			{
				return this._PhoneID;
			}
			set
			{
				if ((this._PhoneID != value))
				{
					this.OnPhoneIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneID = value;
					this.SendPropertyChanged("PhoneID");
					this.OnPhoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeID", DbType="Int NOT NULL")]
		public int PhoneTypeID
		{
			get
			{
				return this._PhoneTypeID;
			}
			set
			{
				if ((this._PhoneTypeID != value))
				{
					if (this._tbPhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeID = value;
					this.SendPropertyChanged("PhoneTypeID");
					this.OnPhoneTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._tbPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbPerson_tbPhone", Storage="_tbPerson", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tbPerson tbPerson
		{
			get
			{
				return this._tbPerson.Entity;
			}
			set
			{
				tbPerson previousValue = this._tbPerson.Entity;
				if (((previousValue != value) 
							|| (this._tbPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbPerson.Entity = null;
						previousValue.tbPhones.Remove(this);
					}
					this._tbPerson.Entity = value;
					if ((value != null))
					{
						value.tbPhones.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("tbPerson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbPhoneType_tbPhone", Storage="_tbPhoneType", ThisKey="PhoneTypeID", OtherKey="PhoneTypeID", IsForeignKey=true)]
		public tbPhoneType tbPhoneType
		{
			get
			{
				return this._tbPhoneType.Entity;
			}
			set
			{
				tbPhoneType previousValue = this._tbPhoneType.Entity;
				if (((previousValue != value) 
							|| (this._tbPhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbPhoneType.Entity = null;
						previousValue.tbPhones.Remove(this);
					}
					this._tbPhoneType.Entity = value;
					if ((value != null))
					{
						value.tbPhones.Add(this);
						this._PhoneTypeID = value.PhoneTypeID;
					}
					else
					{
						this._PhoneTypeID = default(int);
					}
					this.SendPropertyChanged("tbPhoneType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbPhoneTypes")]
	public partial class tbPhoneType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhoneTypeID;
		
		private string _PhoneTypeName;
		
		private EntitySet<tbPhone> _tbPhones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneTypeIDChanging(int value);
    partial void OnPhoneTypeIDChanged();
    partial void OnPhoneTypeNameChanging(string value);
    partial void OnPhoneTypeNameChanged();
    #endregion
		
		public tbPhoneType()
		{
			this._tbPhones = new EntitySet<tbPhone>(new Action<tbPhone>(this.attach_tbPhones), new Action<tbPhone>(this.detach_tbPhones));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhoneTypeID
		{
			get
			{
				return this._PhoneTypeID;
			}
			set
			{
				if ((this._PhoneTypeID != value))
				{
					this.OnPhoneTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeID = value;
					this.SendPropertyChanged("PhoneTypeID");
					this.OnPhoneTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PhoneTypeName
		{
			get
			{
				return this._PhoneTypeName;
			}
			set
			{
				if ((this._PhoneTypeName != value))
				{
					this.OnPhoneTypeNameChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeName = value;
					this.SendPropertyChanged("PhoneTypeName");
					this.OnPhoneTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbPhoneType_tbPhone", Storage="_tbPhones", ThisKey="PhoneTypeID", OtherKey="PhoneTypeID")]
		public EntitySet<tbPhone> tbPhones
		{
			get
			{
				return this._tbPhones;
			}
			set
			{
				this._tbPhones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbPhones(tbPhone entity)
		{
			this.SendPropertyChanging();
			entity.tbPhoneType = this;
		}
		
		private void detach_tbPhones(tbPhone entity)
		{
			this.SendPropertyChanging();
			entity.tbPhoneType = null;
		}
	}
	
	public partial class spGroupsDisplayResult
	{
		
		private string _GroupName;
		
		public spGroupsDisplayResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
	}
	
	public partial class spPhoneTypesDisplayResult
	{
		
		private string _PhoneTypeName;
		
		public spPhoneTypesDisplayResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PhoneTypeName
		{
			get
			{
				return this._PhoneTypeName;
			}
			set
			{
				if ((this._PhoneTypeName != value))
				{
					this._PhoneTypeName = value;
				}
			}
		}
	}
	
	public partial class spContactsDisplayResult
	{
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<int> _PhoneID;
		
		private string _PhoneTypeName;
		
		private string _PhoneNumber;
		
		private string _GroupName;
		
		public spContactsDisplayResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneID", DbType="Int")]
		public System.Nullable<int> PhoneID
		{
			get
			{
				return this._PhoneID;
			}
			set
			{
				if ((this._PhoneID != value))
				{
					this._PhoneID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeName", DbType="NVarChar(50)")]
		public string PhoneTypeName
		{
			get
			{
				return this._PhoneTypeName;
			}
			set
			{
				if ((this._PhoneTypeName != value))
				{
					this._PhoneTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(15)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this._PhoneNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
